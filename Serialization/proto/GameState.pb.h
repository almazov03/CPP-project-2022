// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#ifndef PROTOBUF_INCLUDED_GameState_2eproto
#define PROTOBUF_INCLUDED_GameState_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto 

namespace protobuf_GameState_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GameState_2eproto
namespace serialized {
class Bullet;
class BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class MapBox;
class MapBoxDefaultTypeInternal;
extern MapBoxDefaultTypeInternal _MapBox_default_instance_;
class MapBoxWall;
class MapBoxWallDefaultTypeInternal;
extern MapBoxWallDefaultTypeInternal _MapBoxWall_default_instance_;
class MapBoxesRow;
class MapBoxesRowDefaultTypeInternal;
extern MapBoxesRowDefaultTypeInternal _MapBoxesRow_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace serialized
namespace google {
namespace protobuf {
template<> ::serialized::Bullet* Arena::CreateMaybeMessage<::serialized::Bullet>(Arena*);
template<> ::serialized::GameState* Arena::CreateMaybeMessage<::serialized::GameState>(Arena*);
template<> ::serialized::Map* Arena::CreateMaybeMessage<::serialized::Map>(Arena*);
template<> ::serialized::MapBox* Arena::CreateMaybeMessage<::serialized::MapBox>(Arena*);
template<> ::serialized::MapBoxWall* Arena::CreateMaybeMessage<::serialized::MapBoxWall>(Arena*);
template<> ::serialized::MapBoxesRow* Arena::CreateMaybeMessage<::serialized::MapBoxesRow>(Arena*);
template<> ::serialized::Player* Arena::CreateMaybeMessage<::serialized::Player>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace serialized {

// ===================================================================

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serialized.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .serialized.Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  ::serialized::Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::serialized::Player >*
      mutable_players();
  const ::serialized::Player& players(int index) const;
  ::serialized::Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::serialized::Player >&
      players() const;

  // repeated .serialized.Bullet bullets = 3;
  int bullets_size() const;
  void clear_bullets();
  static const int kBulletsFieldNumber = 3;
  ::serialized::Bullet* mutable_bullets(int index);
  ::google::protobuf::RepeatedPtrField< ::serialized::Bullet >*
      mutable_bullets();
  const ::serialized::Bullet& bullets(int index) const;
  ::serialized::Bullet* add_bullets();
  const ::google::protobuf::RepeatedPtrField< ::serialized::Bullet >&
      bullets() const;

  // optional .serialized.Map map = 2;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 2;
  private:
  const ::serialized::Map& _internal_map() const;
  public:
  const ::serialized::Map& map() const;
  ::serialized::Map* release_map();
  ::serialized::Map* mutable_map();
  void set_allocated_map(::serialized::Map* map);

  // @@protoc_insertion_point(class_scope:serialized.GameState)
 private:
  void set_has_map();
  void clear_has_map();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::serialized::Player > players_;
  ::google::protobuf::RepeatedPtrField< ::serialized::Bullet > bullets_;
  ::serialized::Map* map_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serialized.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Player* other);
  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(NULL);
  }

  Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required int32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required float rotationAngle = 4;
  bool has_rotationangle() const;
  void clear_rotationangle();
  static const int kRotationAngleFieldNumber = 4;
  float rotationangle() const;
  void set_rotationangle(float value);

  // @@protoc_insertion_point(class_scope:serialized.Player)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_id();
  void clear_has_id();
  void set_has_rotationangle();
  void clear_has_rotationangle();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  ::google::protobuf::int32 id_;
  float rotationangle_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bullet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serialized.Bullet) */ {
 public:
  Bullet();
  virtual ~Bullet();

  Bullet(const Bullet& from);

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(Bullet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bullet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Bullet* other);
  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return CreateMaybeMessage<Bullet>(NULL);
  }

  Bullet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bullet& from);
  void MergeFrom(const Bullet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float rotationAngle = 3;
  bool has_rotationangle() const;
  void clear_rotationangle();
  static const int kRotationAngleFieldNumber = 3;
  float rotationangle() const;
  void set_rotationangle(float value);

  // @@protoc_insertion_point(class_scope:serialized.Bullet)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_rotationangle();
  void clear_has_rotationangle();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float rotationangle_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serialized.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Map* other);
  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(NULL);
  }

  Map* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .serialized.MapBoxesRow rows = 5;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 5;
  ::serialized::MapBoxesRow* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::serialized::MapBoxesRow >*
      mutable_rows();
  const ::serialized::MapBoxesRow& rows(int index) const;
  ::serialized::MapBoxesRow* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::serialized::MapBoxesRow >&
      rows() const;

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // required int32 rowsNumber = 3;
  bool has_rowsnumber() const;
  void clear_rowsnumber();
  static const int kRowsNumberFieldNumber = 3;
  ::google::protobuf::int32 rowsnumber() const;
  void set_rowsnumber(::google::protobuf::int32 value);

  // required int32 columnsNumber = 4;
  bool has_columnsnumber() const;
  void clear_columnsnumber();
  static const int kColumnsNumberFieldNumber = 4;
  ::google::protobuf::int32 columnsnumber() const;
  void set_columnsnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:serialized.Map)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_rowsnumber();
  void clear_has_rowsnumber();
  void set_has_columnsnumber();
  void clear_has_columnsnumber();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::serialized::MapBoxesRow > rows_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 rowsnumber_;
  ::google::protobuf::int32 columnsnumber_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapBoxesRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serialized.MapBoxesRow) */ {
 public:
  MapBoxesRow();
  virtual ~MapBoxesRow();

  MapBoxesRow(const MapBoxesRow& from);

  inline MapBoxesRow& operator=(const MapBoxesRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapBoxesRow(MapBoxesRow&& from) noexcept
    : MapBoxesRow() {
    *this = ::std::move(from);
  }

  inline MapBoxesRow& operator=(MapBoxesRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapBoxesRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBoxesRow* internal_default_instance() {
    return reinterpret_cast<const MapBoxesRow*>(
               &_MapBoxesRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MapBoxesRow* other);
  friend void swap(MapBoxesRow& a, MapBoxesRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapBoxesRow* New() const final {
    return CreateMaybeMessage<MapBoxesRow>(NULL);
  }

  MapBoxesRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapBoxesRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapBoxesRow& from);
  void MergeFrom(const MapBoxesRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBoxesRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .serialized.MapBox boxes = 1;
  int boxes_size() const;
  void clear_boxes();
  static const int kBoxesFieldNumber = 1;
  ::serialized::MapBox* mutable_boxes(int index);
  ::google::protobuf::RepeatedPtrField< ::serialized::MapBox >*
      mutable_boxes();
  const ::serialized::MapBox& boxes(int index) const;
  ::serialized::MapBox* add_boxes();
  const ::google::protobuf::RepeatedPtrField< ::serialized::MapBox >&
      boxes() const;

  // @@protoc_insertion_point(class_scope:serialized.MapBoxesRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::serialized::MapBox > boxes_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serialized.MapBox) */ {
 public:
  MapBox();
  virtual ~MapBox();

  MapBox(const MapBox& from);

  inline MapBox& operator=(const MapBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapBox(MapBox&& from) noexcept
    : MapBox() {
    *this = ::std::move(from);
  }

  inline MapBox& operator=(MapBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBox* internal_default_instance() {
    return reinterpret_cast<const MapBox*>(
               &_MapBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MapBox* other);
  friend void swap(MapBox& a, MapBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapBox* New() const final {
    return CreateMaybeMessage<MapBox>(NULL);
  }

  MapBox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapBox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapBox& from);
  void MergeFrom(const MapBox& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .serialized.MapBoxWall leftWall = 3;
  bool has_leftwall() const;
  void clear_leftwall();
  static const int kLeftWallFieldNumber = 3;
  private:
  const ::serialized::MapBoxWall& _internal_leftwall() const;
  public:
  const ::serialized::MapBoxWall& leftwall() const;
  ::serialized::MapBoxWall* release_leftwall();
  ::serialized::MapBoxWall* mutable_leftwall();
  void set_allocated_leftwall(::serialized::MapBoxWall* leftwall);

  // required .serialized.MapBoxWall upperWall = 4;
  bool has_upperwall() const;
  void clear_upperwall();
  static const int kUpperWallFieldNumber = 4;
  private:
  const ::serialized::MapBoxWall& _internal_upperwall() const;
  public:
  const ::serialized::MapBoxWall& upperwall() const;
  ::serialized::MapBoxWall* release_upperwall();
  ::serialized::MapBoxWall* mutable_upperwall();
  void set_allocated_upperwall(::serialized::MapBoxWall* upperwall);

  // required .serialized.MapBoxWall rightWall = 5;
  bool has_rightwall() const;
  void clear_rightwall();
  static const int kRightWallFieldNumber = 5;
  private:
  const ::serialized::MapBoxWall& _internal_rightwall() const;
  public:
  const ::serialized::MapBoxWall& rightwall() const;
  ::serialized::MapBoxWall* release_rightwall();
  ::serialized::MapBoxWall* mutable_rightwall();
  void set_allocated_rightwall(::serialized::MapBoxWall* rightwall);

  // required .serialized.MapBoxWall lowerWall = 6;
  bool has_lowerwall() const;
  void clear_lowerwall();
  static const int kLowerWallFieldNumber = 6;
  private:
  const ::serialized::MapBoxWall& _internal_lowerwall() const;
  public:
  const ::serialized::MapBoxWall& lowerwall() const;
  ::serialized::MapBoxWall* release_lowerwall();
  ::serialized::MapBoxWall* mutable_lowerwall();
  void set_allocated_lowerwall(::serialized::MapBoxWall* lowerwall);

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:serialized.MapBox)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_leftwall();
  void clear_has_leftwall();
  void set_has_upperwall();
  void clear_has_upperwall();
  void set_has_rightwall();
  void clear_has_rightwall();
  void set_has_lowerwall();
  void clear_has_lowerwall();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::serialized::MapBoxWall* leftwall_;
  ::serialized::MapBoxWall* upperwall_;
  ::serialized::MapBoxWall* rightwall_;
  ::serialized::MapBoxWall* lowerwall_;
  float x_;
  float y_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapBoxWall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serialized.MapBoxWall) */ {
 public:
  MapBoxWall();
  virtual ~MapBoxWall();

  MapBoxWall(const MapBoxWall& from);

  inline MapBoxWall& operator=(const MapBoxWall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapBoxWall(MapBoxWall&& from) noexcept
    : MapBoxWall() {
    *this = ::std::move(from);
  }

  inline MapBoxWall& operator=(MapBoxWall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapBoxWall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBoxWall* internal_default_instance() {
    return reinterpret_cast<const MapBoxWall*>(
               &_MapBoxWall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MapBoxWall* other);
  friend void swap(MapBoxWall& a, MapBoxWall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapBoxWall* New() const final {
    return CreateMaybeMessage<MapBoxWall>(NULL);
  }

  MapBoxWall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapBoxWall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapBoxWall& from);
  void MergeFrom(const MapBoxWall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBoxWall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required bool isHidden = 3;
  bool has_ishidden() const;
  void clear_ishidden();
  static const int kIsHiddenFieldNumber = 3;
  bool ishidden() const;
  void set_ishidden(bool value);

  // @@protoc_insertion_point(class_scope:serialized.MapBoxWall)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_ishidden();
  void clear_has_ishidden();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  bool ishidden_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameState

// repeated .serialized.Player players = 1;
inline int GameState::players_size() const {
  return players_.size();
}
inline void GameState::clear_players() {
  players_.Clear();
}
inline ::serialized::Player* GameState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:serialized.GameState.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serialized::Player >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:serialized.GameState.players)
  return &players_;
}
inline const ::serialized::Player& GameState::players(int index) const {
  // @@protoc_insertion_point(field_get:serialized.GameState.players)
  return players_.Get(index);
}
inline ::serialized::Player* GameState::add_players() {
  // @@protoc_insertion_point(field_add:serialized.GameState.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serialized::Player >&
GameState::players() const {
  // @@protoc_insertion_point(field_list:serialized.GameState.players)
  return players_;
}

// optional .serialized.Map map = 2;
inline bool GameState::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameState::set_has_map() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameState::clear_has_map() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameState::clear_map() {
  if (map_ != NULL) map_->Clear();
  clear_has_map();
}
inline const ::serialized::Map& GameState::_internal_map() const {
  return *map_;
}
inline const ::serialized::Map& GameState::map() const {
  const ::serialized::Map* p = map_;
  // @@protoc_insertion_point(field_get:serialized.GameState.map)
  return p != NULL ? *p : *reinterpret_cast<const ::serialized::Map*>(
      &::serialized::_Map_default_instance_);
}
inline ::serialized::Map* GameState::release_map() {
  // @@protoc_insertion_point(field_release:serialized.GameState.map)
  clear_has_map();
  ::serialized::Map* temp = map_;
  map_ = NULL;
  return temp;
}
inline ::serialized::Map* GameState::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    auto* p = CreateMaybeMessage<::serialized::Map>(GetArenaNoVirtual());
    map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serialized.GameState.map)
  return map_;
}
inline void GameState::set_allocated_map(::serialized::Map* map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete map_;
  }
  if (map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
  } else {
    clear_has_map();
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:serialized.GameState.map)
}

// repeated .serialized.Bullet bullets = 3;
inline int GameState::bullets_size() const {
  return bullets_.size();
}
inline void GameState::clear_bullets() {
  bullets_.Clear();
}
inline ::serialized::Bullet* GameState::mutable_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:serialized.GameState.bullets)
  return bullets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serialized::Bullet >*
GameState::mutable_bullets() {
  // @@protoc_insertion_point(field_mutable_list:serialized.GameState.bullets)
  return &bullets_;
}
inline const ::serialized::Bullet& GameState::bullets(int index) const {
  // @@protoc_insertion_point(field_get:serialized.GameState.bullets)
  return bullets_.Get(index);
}
inline ::serialized::Bullet* GameState::add_bullets() {
  // @@protoc_insertion_point(field_add:serialized.GameState.bullets)
  return bullets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serialized::Bullet >&
GameState::bullets() const {
  // @@protoc_insertion_point(field_list:serialized.GameState.bullets)
  return bullets_;
}

// -------------------------------------------------------------------

// Player

// required float x = 1;
inline bool Player::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Player::x() const {
  // @@protoc_insertion_point(field_get:serialized.Player.x)
  return x_;
}
inline void Player::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:serialized.Player.x)
}

// required float y = 2;
inline bool Player::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Player::y() const {
  // @@protoc_insertion_point(field_get:serialized.Player.y)
  return y_;
}
inline void Player::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:serialized.Player.y)
}

// required int32 id = 3;
inline bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Player::id() const {
  // @@protoc_insertion_point(field_get:serialized.Player.id)
  return id_;
}
inline void Player::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:serialized.Player.id)
}

// required float rotationAngle = 4;
inline bool Player::has_rotationangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_rotationangle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_rotationangle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_rotationangle() {
  rotationangle_ = 0;
  clear_has_rotationangle();
}
inline float Player::rotationangle() const {
  // @@protoc_insertion_point(field_get:serialized.Player.rotationAngle)
  return rotationangle_;
}
inline void Player::set_rotationangle(float value) {
  set_has_rotationangle();
  rotationangle_ = value;
  // @@protoc_insertion_point(field_set:serialized.Player.rotationAngle)
}

// -------------------------------------------------------------------

// Bullet

// required float x = 1;
inline bool Bullet::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bullet::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bullet::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bullet::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Bullet::x() const {
  // @@protoc_insertion_point(field_get:serialized.Bullet.x)
  return x_;
}
inline void Bullet::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:serialized.Bullet.x)
}

// required float y = 2;
inline bool Bullet::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bullet::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bullet::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bullet::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Bullet::y() const {
  // @@protoc_insertion_point(field_get:serialized.Bullet.y)
  return y_;
}
inline void Bullet::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:serialized.Bullet.y)
}

// required float rotationAngle = 3;
inline bool Bullet::has_rotationangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bullet::set_has_rotationangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bullet::clear_has_rotationangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bullet::clear_rotationangle() {
  rotationangle_ = 0;
  clear_has_rotationangle();
}
inline float Bullet::rotationangle() const {
  // @@protoc_insertion_point(field_get:serialized.Bullet.rotationAngle)
  return rotationangle_;
}
inline void Bullet::set_rotationangle(float value) {
  set_has_rotationangle();
  rotationangle_ = value;
  // @@protoc_insertion_point(field_set:serialized.Bullet.rotationAngle)
}

// -------------------------------------------------------------------

// Map

// required int32 x = 1;
inline bool Map::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Map::x() const {
  // @@protoc_insertion_point(field_get:serialized.Map.x)
  return x_;
}
inline void Map::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:serialized.Map.x)
}

// required int32 y = 2;
inline bool Map::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Map::y() const {
  // @@protoc_insertion_point(field_get:serialized.Map.y)
  return y_;
}
inline void Map::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:serialized.Map.y)
}

// required int32 rowsNumber = 3;
inline bool Map::has_rowsnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map::set_has_rowsnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map::clear_has_rowsnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map::clear_rowsnumber() {
  rowsnumber_ = 0;
  clear_has_rowsnumber();
}
inline ::google::protobuf::int32 Map::rowsnumber() const {
  // @@protoc_insertion_point(field_get:serialized.Map.rowsNumber)
  return rowsnumber_;
}
inline void Map::set_rowsnumber(::google::protobuf::int32 value) {
  set_has_rowsnumber();
  rowsnumber_ = value;
  // @@protoc_insertion_point(field_set:serialized.Map.rowsNumber)
}

// required int32 columnsNumber = 4;
inline bool Map::has_columnsnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map::set_has_columnsnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map::clear_has_columnsnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map::clear_columnsnumber() {
  columnsnumber_ = 0;
  clear_has_columnsnumber();
}
inline ::google::protobuf::int32 Map::columnsnumber() const {
  // @@protoc_insertion_point(field_get:serialized.Map.columnsNumber)
  return columnsnumber_;
}
inline void Map::set_columnsnumber(::google::protobuf::int32 value) {
  set_has_columnsnumber();
  columnsnumber_ = value;
  // @@protoc_insertion_point(field_set:serialized.Map.columnsNumber)
}

// repeated .serialized.MapBoxesRow rows = 5;
inline int Map::rows_size() const {
  return rows_.size();
}
inline void Map::clear_rows() {
  rows_.Clear();
}
inline ::serialized::MapBoxesRow* Map::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:serialized.Map.rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serialized::MapBoxesRow >*
Map::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:serialized.Map.rows)
  return &rows_;
}
inline const ::serialized::MapBoxesRow& Map::rows(int index) const {
  // @@protoc_insertion_point(field_get:serialized.Map.rows)
  return rows_.Get(index);
}
inline ::serialized::MapBoxesRow* Map::add_rows() {
  // @@protoc_insertion_point(field_add:serialized.Map.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serialized::MapBoxesRow >&
Map::rows() const {
  // @@protoc_insertion_point(field_list:serialized.Map.rows)
  return rows_;
}

// -------------------------------------------------------------------

// MapBoxesRow

// repeated .serialized.MapBox boxes = 1;
inline int MapBoxesRow::boxes_size() const {
  return boxes_.size();
}
inline void MapBoxesRow::clear_boxes() {
  boxes_.Clear();
}
inline ::serialized::MapBox* MapBoxesRow::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:serialized.MapBoxesRow.boxes)
  return boxes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serialized::MapBox >*
MapBoxesRow::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:serialized.MapBoxesRow.boxes)
  return &boxes_;
}
inline const ::serialized::MapBox& MapBoxesRow::boxes(int index) const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxesRow.boxes)
  return boxes_.Get(index);
}
inline ::serialized::MapBox* MapBoxesRow::add_boxes() {
  // @@protoc_insertion_point(field_add:serialized.MapBoxesRow.boxes)
  return boxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serialized::MapBox >&
MapBoxesRow::boxes() const {
  // @@protoc_insertion_point(field_list:serialized.MapBoxesRow.boxes)
  return boxes_;
}

// -------------------------------------------------------------------

// MapBox

// required float x = 1;
inline bool MapBox::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapBox::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapBox::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapBox::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float MapBox::x() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.x)
  return x_;
}
inline void MapBox::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:serialized.MapBox.x)
}

// required float y = 2;
inline bool MapBox::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapBox::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapBox::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapBox::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float MapBox::y() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.y)
  return y_;
}
inline void MapBox::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:serialized.MapBox.y)
}

// required .serialized.MapBoxWall leftWall = 3;
inline bool MapBox::has_leftwall() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapBox::set_has_leftwall() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapBox::clear_has_leftwall() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapBox::clear_leftwall() {
  if (leftwall_ != NULL) leftwall_->Clear();
  clear_has_leftwall();
}
inline const ::serialized::MapBoxWall& MapBox::_internal_leftwall() const {
  return *leftwall_;
}
inline const ::serialized::MapBoxWall& MapBox::leftwall() const {
  const ::serialized::MapBoxWall* p = leftwall_;
  // @@protoc_insertion_point(field_get:serialized.MapBox.leftWall)
  return p != NULL ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline ::serialized::MapBoxWall* MapBox::release_leftwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.leftWall)
  clear_has_leftwall();
  ::serialized::MapBoxWall* temp = leftwall_;
  leftwall_ = NULL;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::mutable_leftwall() {
  set_has_leftwall();
  if (leftwall_ == NULL) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArenaNoVirtual());
    leftwall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.leftWall)
  return leftwall_;
}
inline void MapBox::set_allocated_leftwall(::serialized::MapBoxWall* leftwall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leftwall_;
  }
  if (leftwall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leftwall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leftwall, submessage_arena);
    }
    set_has_leftwall();
  } else {
    clear_has_leftwall();
  }
  leftwall_ = leftwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.leftWall)
}

// required .serialized.MapBoxWall upperWall = 4;
inline bool MapBox::has_upperwall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapBox::set_has_upperwall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapBox::clear_has_upperwall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapBox::clear_upperwall() {
  if (upperwall_ != NULL) upperwall_->Clear();
  clear_has_upperwall();
}
inline const ::serialized::MapBoxWall& MapBox::_internal_upperwall() const {
  return *upperwall_;
}
inline const ::serialized::MapBoxWall& MapBox::upperwall() const {
  const ::serialized::MapBoxWall* p = upperwall_;
  // @@protoc_insertion_point(field_get:serialized.MapBox.upperWall)
  return p != NULL ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline ::serialized::MapBoxWall* MapBox::release_upperwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.upperWall)
  clear_has_upperwall();
  ::serialized::MapBoxWall* temp = upperwall_;
  upperwall_ = NULL;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::mutable_upperwall() {
  set_has_upperwall();
  if (upperwall_ == NULL) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArenaNoVirtual());
    upperwall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.upperWall)
  return upperwall_;
}
inline void MapBox::set_allocated_upperwall(::serialized::MapBoxWall* upperwall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upperwall_;
  }
  if (upperwall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upperwall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upperwall, submessage_arena);
    }
    set_has_upperwall();
  } else {
    clear_has_upperwall();
  }
  upperwall_ = upperwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.upperWall)
}

// required .serialized.MapBoxWall rightWall = 5;
inline bool MapBox::has_rightwall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapBox::set_has_rightwall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapBox::clear_has_rightwall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapBox::clear_rightwall() {
  if (rightwall_ != NULL) rightwall_->Clear();
  clear_has_rightwall();
}
inline const ::serialized::MapBoxWall& MapBox::_internal_rightwall() const {
  return *rightwall_;
}
inline const ::serialized::MapBoxWall& MapBox::rightwall() const {
  const ::serialized::MapBoxWall* p = rightwall_;
  // @@protoc_insertion_point(field_get:serialized.MapBox.rightWall)
  return p != NULL ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline ::serialized::MapBoxWall* MapBox::release_rightwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.rightWall)
  clear_has_rightwall();
  ::serialized::MapBoxWall* temp = rightwall_;
  rightwall_ = NULL;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::mutable_rightwall() {
  set_has_rightwall();
  if (rightwall_ == NULL) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArenaNoVirtual());
    rightwall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.rightWall)
  return rightwall_;
}
inline void MapBox::set_allocated_rightwall(::serialized::MapBoxWall* rightwall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rightwall_;
  }
  if (rightwall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rightwall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rightwall, submessage_arena);
    }
    set_has_rightwall();
  } else {
    clear_has_rightwall();
  }
  rightwall_ = rightwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.rightWall)
}

// required .serialized.MapBoxWall lowerWall = 6;
inline bool MapBox::has_lowerwall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapBox::set_has_lowerwall() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapBox::clear_has_lowerwall() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapBox::clear_lowerwall() {
  if (lowerwall_ != NULL) lowerwall_->Clear();
  clear_has_lowerwall();
}
inline const ::serialized::MapBoxWall& MapBox::_internal_lowerwall() const {
  return *lowerwall_;
}
inline const ::serialized::MapBoxWall& MapBox::lowerwall() const {
  const ::serialized::MapBoxWall* p = lowerwall_;
  // @@protoc_insertion_point(field_get:serialized.MapBox.lowerWall)
  return p != NULL ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline ::serialized::MapBoxWall* MapBox::release_lowerwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.lowerWall)
  clear_has_lowerwall();
  ::serialized::MapBoxWall* temp = lowerwall_;
  lowerwall_ = NULL;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::mutable_lowerwall() {
  set_has_lowerwall();
  if (lowerwall_ == NULL) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArenaNoVirtual());
    lowerwall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.lowerWall)
  return lowerwall_;
}
inline void MapBox::set_allocated_lowerwall(::serialized::MapBoxWall* lowerwall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lowerwall_;
  }
  if (lowerwall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lowerwall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lowerwall, submessage_arena);
    }
    set_has_lowerwall();
  } else {
    clear_has_lowerwall();
  }
  lowerwall_ = lowerwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.lowerWall)
}

// -------------------------------------------------------------------

// MapBoxWall

// required float x = 1;
inline bool MapBoxWall::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapBoxWall::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapBoxWall::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapBoxWall::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float MapBoxWall::x() const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxWall.x)
  return x_;
}
inline void MapBoxWall::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:serialized.MapBoxWall.x)
}

// required float y = 2;
inline bool MapBoxWall::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapBoxWall::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapBoxWall::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapBoxWall::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float MapBoxWall::y() const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxWall.y)
  return y_;
}
inline void MapBoxWall::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:serialized.MapBoxWall.y)
}

// required bool isHidden = 3;
inline bool MapBoxWall::has_ishidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapBoxWall::set_has_ishidden() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapBoxWall::clear_has_ishidden() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapBoxWall::clear_ishidden() {
  ishidden_ = false;
  clear_has_ishidden();
}
inline bool MapBoxWall::ishidden() const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxWall.isHidden)
  return ishidden_;
}
inline void MapBoxWall::set_ishidden(bool value) {
  set_has_ishidden();
  ishidden_ = value;
  // @@protoc_insertion_point(field_set:serialized.MapBoxWall.isHidden)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialized

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GameState_2eproto
