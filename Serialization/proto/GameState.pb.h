// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameState_2eproto;
namespace serialized {
class Bullet;
class BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class MapBox;
class MapBoxDefaultTypeInternal;
extern MapBoxDefaultTypeInternal _MapBox_default_instance_;
class MapBoxWall;
class MapBoxWallDefaultTypeInternal;
extern MapBoxWallDefaultTypeInternal _MapBoxWall_default_instance_;
class MapBoxesRow;
class MapBoxesRowDefaultTypeInternal;
extern MapBoxesRowDefaultTypeInternal _MapBoxesRow_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace serialized
PROTOBUF_NAMESPACE_OPEN
template<> ::serialized::Bullet* Arena::CreateMaybeMessage<::serialized::Bullet>(Arena*);
template<> ::serialized::GameState* Arena::CreateMaybeMessage<::serialized::GameState>(Arena*);
template<> ::serialized::Map* Arena::CreateMaybeMessage<::serialized::Map>(Arena*);
template<> ::serialized::MapBox* Arena::CreateMaybeMessage<::serialized::MapBox>(Arena*);
template<> ::serialized::MapBoxWall* Arena::CreateMaybeMessage<::serialized::MapBoxWall>(Arena*);
template<> ::serialized::MapBoxesRow* Arena::CreateMaybeMessage<::serialized::MapBoxesRow>(Arena*);
template<> ::serialized::Player* Arena::CreateMaybeMessage<::serialized::Player>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialized {

// ===================================================================

class GameState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialized.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {};
  virtual ~GameState();

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(nullptr);
  }

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialized.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameState_2eproto);
    return ::descriptor_table_GameState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // repeated .serialized.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::serialized::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::Player >*
      mutable_players();
  private:
  const ::serialized::Player& _internal_players(int index) const;
  ::serialized::Player* _internal_add_players();
  public:
  const ::serialized::Player& players(int index) const;
  ::serialized::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::Player >&
      players() const;

  // required .serialized.Map map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::serialized::Map& map() const;
  ::serialized::Map* release_map();
  ::serialized::Map* mutable_map();
  void set_allocated_map(::serialized::Map* map);
  private:
  const ::serialized::Map& _internal_map() const;
  ::serialized::Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::serialized::Map* map);
  ::serialized::Map* unsafe_arena_release_map();

  // @@protoc_insertion_point(class_scope:serialized.GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::Player > players_;
  ::serialized::Map* map_;
  friend struct ::TableStruct_GameState_2eproto;
};
// -------------------------------------------------------------------

class Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialized.Player) */ {
 public:
  inline Player() : Player(nullptr) {};
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialized.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameState_2eproto);
    return ::descriptor_table_GameState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required int32 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialized.Player)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_GameState_2eproto;
};
// -------------------------------------------------------------------

class Bullet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialized.Bullet) */ {
 public:
  inline Bullet() : Bullet(nullptr) {};
  virtual ~Bullet();

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bullet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return CreateMaybeMessage<Bullet>(nullptr);
  }

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bullet& from);
  void MergeFrom(const Bullet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialized.Bullet";
  }
  protected:
  explicit Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameState_2eproto);
    return ::descriptor_table_GameState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required int32 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialized.Bullet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_GameState_2eproto;
};
// -------------------------------------------------------------------

class Map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialized.Map) */ {
 public:
  inline Map() : Map(nullptr) {};
  virtual ~Map();

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialized.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameState_2eproto);
    return ::descriptor_table_GameState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kRowsNumberFieldNumber = 3,
    kColumnsNumberFieldNumber = 4,
  };
  // repeated .serialized.MapBoxesRow rows = 5;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::serialized::MapBoxesRow* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBoxesRow >*
      mutable_rows();
  private:
  const ::serialized::MapBoxesRow& _internal_rows(int index) const;
  ::serialized::MapBoxesRow* _internal_add_rows();
  public:
  const ::serialized::MapBoxesRow& rows(int index) const;
  ::serialized::MapBoxesRow* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBoxesRow >&
      rows() const;

  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 rowsNumber = 3;
  bool has_rowsnumber() const;
  private:
  bool _internal_has_rowsnumber() const;
  public:
  void clear_rowsnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 rowsnumber() const;
  void set_rowsnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rowsnumber() const;
  void _internal_set_rowsnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 columnsNumber = 4;
  bool has_columnsnumber() const;
  private:
  bool _internal_has_columnsnumber() const;
  public:
  void clear_columnsnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 columnsnumber() const;
  void set_columnsnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_columnsnumber() const;
  void _internal_set_columnsnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialized.Map)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBoxesRow > rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 rowsnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 columnsnumber_;
  friend struct ::TableStruct_GameState_2eproto;
};
// -------------------------------------------------------------------

class MapBoxesRow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialized.MapBoxesRow) */ {
 public:
  inline MapBoxesRow() : MapBoxesRow(nullptr) {};
  virtual ~MapBoxesRow();

  MapBoxesRow(const MapBoxesRow& from);
  MapBoxesRow(MapBoxesRow&& from) noexcept
    : MapBoxesRow() {
    *this = ::std::move(from);
  }

  inline MapBoxesRow& operator=(const MapBoxesRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapBoxesRow& operator=(MapBoxesRow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapBoxesRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBoxesRow* internal_default_instance() {
    return reinterpret_cast<const MapBoxesRow*>(
               &_MapBoxesRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MapBoxesRow& a, MapBoxesRow& b) {
    a.Swap(&b);
  }
  inline void Swap(MapBoxesRow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapBoxesRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapBoxesRow* New() const final {
    return CreateMaybeMessage<MapBoxesRow>(nullptr);
  }

  MapBoxesRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapBoxesRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapBoxesRow& from);
  void MergeFrom(const MapBoxesRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBoxesRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialized.MapBoxesRow";
  }
  protected:
  explicit MapBoxesRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameState_2eproto);
    return ::descriptor_table_GameState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxesFieldNumber = 1,
  };
  // repeated .serialized.MapBox boxes = 1;
  int boxes_size() const;
  private:
  int _internal_boxes_size() const;
  public:
  void clear_boxes();
  ::serialized::MapBox* mutable_boxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBox >*
      mutable_boxes();
  private:
  const ::serialized::MapBox& _internal_boxes(int index) const;
  ::serialized::MapBox* _internal_add_boxes();
  public:
  const ::serialized::MapBox& boxes(int index) const;
  ::serialized::MapBox* add_boxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBox >&
      boxes() const;

  // @@protoc_insertion_point(class_scope:serialized.MapBoxesRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBox > boxes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameState_2eproto;
};
// -------------------------------------------------------------------

class MapBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialized.MapBox) */ {
 public:
  inline MapBox() : MapBox(nullptr) {};
  virtual ~MapBox();

  MapBox(const MapBox& from);
  MapBox(MapBox&& from) noexcept
    : MapBox() {
    *this = ::std::move(from);
  }

  inline MapBox& operator=(const MapBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapBox& operator=(MapBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBox* internal_default_instance() {
    return reinterpret_cast<const MapBox*>(
               &_MapBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapBox& a, MapBox& b) {
    a.Swap(&b);
  }
  inline void Swap(MapBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapBox* New() const final {
    return CreateMaybeMessage<MapBox>(nullptr);
  }

  MapBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapBox& from);
  void MergeFrom(const MapBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialized.MapBox";
  }
  protected:
  explicit MapBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameState_2eproto);
    return ::descriptor_table_GameState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftWallFieldNumber = 3,
    kUpperWallFieldNumber = 4,
    kRightWallFieldNumber = 5,
    kLowerWallFieldNumber = 6,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required .serialized.MapBoxWall leftWall = 3;
  bool has_leftwall() const;
  private:
  bool _internal_has_leftwall() const;
  public:
  void clear_leftwall();
  const ::serialized::MapBoxWall& leftwall() const;
  ::serialized::MapBoxWall* release_leftwall();
  ::serialized::MapBoxWall* mutable_leftwall();
  void set_allocated_leftwall(::serialized::MapBoxWall* leftwall);
  private:
  const ::serialized::MapBoxWall& _internal_leftwall() const;
  ::serialized::MapBoxWall* _internal_mutable_leftwall();
  public:
  void unsafe_arena_set_allocated_leftwall(
      ::serialized::MapBoxWall* leftwall);
  ::serialized::MapBoxWall* unsafe_arena_release_leftwall();

  // required .serialized.MapBoxWall upperWall = 4;
  bool has_upperwall() const;
  private:
  bool _internal_has_upperwall() const;
  public:
  void clear_upperwall();
  const ::serialized::MapBoxWall& upperwall() const;
  ::serialized::MapBoxWall* release_upperwall();
  ::serialized::MapBoxWall* mutable_upperwall();
  void set_allocated_upperwall(::serialized::MapBoxWall* upperwall);
  private:
  const ::serialized::MapBoxWall& _internal_upperwall() const;
  ::serialized::MapBoxWall* _internal_mutable_upperwall();
  public:
  void unsafe_arena_set_allocated_upperwall(
      ::serialized::MapBoxWall* upperwall);
  ::serialized::MapBoxWall* unsafe_arena_release_upperwall();

  // required .serialized.MapBoxWall rightWall = 5;
  bool has_rightwall() const;
  private:
  bool _internal_has_rightwall() const;
  public:
  void clear_rightwall();
  const ::serialized::MapBoxWall& rightwall() const;
  ::serialized::MapBoxWall* release_rightwall();
  ::serialized::MapBoxWall* mutable_rightwall();
  void set_allocated_rightwall(::serialized::MapBoxWall* rightwall);
  private:
  const ::serialized::MapBoxWall& _internal_rightwall() const;
  ::serialized::MapBoxWall* _internal_mutable_rightwall();
  public:
  void unsafe_arena_set_allocated_rightwall(
      ::serialized::MapBoxWall* rightwall);
  ::serialized::MapBoxWall* unsafe_arena_release_rightwall();

  // required .serialized.MapBoxWall lowerWall = 6;
  bool has_lowerwall() const;
  private:
  bool _internal_has_lowerwall() const;
  public:
  void clear_lowerwall();
  const ::serialized::MapBoxWall& lowerwall() const;
  ::serialized::MapBoxWall* release_lowerwall();
  ::serialized::MapBoxWall* mutable_lowerwall();
  void set_allocated_lowerwall(::serialized::MapBoxWall* lowerwall);
  private:
  const ::serialized::MapBoxWall& _internal_lowerwall() const;
  ::serialized::MapBoxWall* _internal_mutable_lowerwall();
  public:
  void unsafe_arena_set_allocated_lowerwall(
      ::serialized::MapBoxWall* lowerwall);
  ::serialized::MapBoxWall* unsafe_arena_release_lowerwall();

  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:serialized.MapBox)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::serialized::MapBoxWall* leftwall_;
  ::serialized::MapBoxWall* upperwall_;
  ::serialized::MapBoxWall* rightwall_;
  ::serialized::MapBoxWall* lowerwall_;
  float x_;
  float y_;
  friend struct ::TableStruct_GameState_2eproto;
};
// -------------------------------------------------------------------

class MapBoxWall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialized.MapBoxWall) */ {
 public:
  inline MapBoxWall() : MapBoxWall(nullptr) {};
  virtual ~MapBoxWall();

  MapBoxWall(const MapBoxWall& from);
  MapBoxWall(MapBoxWall&& from) noexcept
    : MapBoxWall() {
    *this = ::std::move(from);
  }

  inline MapBoxWall& operator=(const MapBoxWall& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapBoxWall& operator=(MapBoxWall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapBoxWall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBoxWall* internal_default_instance() {
    return reinterpret_cast<const MapBoxWall*>(
               &_MapBoxWall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MapBoxWall& a, MapBoxWall& b) {
    a.Swap(&b);
  }
  inline void Swap(MapBoxWall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapBoxWall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapBoxWall* New() const final {
    return CreateMaybeMessage<MapBoxWall>(nullptr);
  }

  MapBoxWall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapBoxWall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapBoxWall& from);
  void MergeFrom(const MapBoxWall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBoxWall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialized.MapBoxWall";
  }
  protected:
  explicit MapBoxWall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameState_2eproto);
    return ::descriptor_table_GameState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kIsHiddenFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required bool isHidden = 3;
  bool has_ishidden() const;
  private:
  bool _internal_has_ishidden() const;
  public:
  void clear_ishidden();
  bool ishidden() const;
  void set_ishidden(bool value);
  private:
  bool _internal_ishidden() const;
  void _internal_set_ishidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:serialized.MapBoxWall)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  bool ishidden_;
  friend struct ::TableStruct_GameState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameState

// repeated .serialized.Player players = 1;
inline int GameState::_internal_players_size() const {
  return players_.size();
}
inline int GameState::players_size() const {
  return _internal_players_size();
}
inline void GameState::clear_players() {
  players_.Clear();
}
inline ::serialized::Player* GameState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:serialized.GameState.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::Player >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:serialized.GameState.players)
  return &players_;
}
inline const ::serialized::Player& GameState::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::serialized::Player& GameState::players(int index) const {
  // @@protoc_insertion_point(field_get:serialized.GameState.players)
  return _internal_players(index);
}
inline ::serialized::Player* GameState::_internal_add_players() {
  return players_.Add();
}
inline ::serialized::Player* GameState::add_players() {
  // @@protoc_insertion_point(field_add:serialized.GameState.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::Player >&
GameState::players() const {
  // @@protoc_insertion_point(field_list:serialized.GameState.players)
  return players_;
}

// required .serialized.Map map = 2;
inline bool GameState::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || map_ != nullptr);
  return value;
}
inline bool GameState::has_map() const {
  return _internal_has_map();
}
inline void GameState::clear_map() {
  if (map_ != nullptr) map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::serialized::Map& GameState::_internal_map() const {
  const ::serialized::Map* p = map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialized::Map*>(
      &::serialized::_Map_default_instance_);
}
inline const ::serialized::Map& GameState::map() const {
  // @@protoc_insertion_point(field_get:serialized.GameState.map)
  return _internal_map();
}
inline void GameState::unsafe_arena_set_allocated_map(
    ::serialized::Map* map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialized.GameState.map)
}
inline ::serialized::Map* GameState::release_map() {
  auto temp = unsafe_arena_release_map();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::serialized::Map* GameState::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:serialized.GameState.map)
  _has_bits_[0] &= ~0x00000001u;
  ::serialized::Map* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::serialized::Map* GameState::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialized::Map>(GetArena());
    map_ = p;
  }
  return map_;
}
inline ::serialized::Map* GameState::mutable_map() {
  // @@protoc_insertion_point(field_mutable:serialized.GameState.map)
  return _internal_mutable_map();
}
inline void GameState::set_allocated_map(::serialized::Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:serialized.GameState.map)
}

// -------------------------------------------------------------------

// Player

// required float x = 1;
inline bool Player::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Player::has_x() const {
  return _internal_has_x();
}
inline void Player::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Player::_internal_x() const {
  return x_;
}
inline float Player::x() const {
  // @@protoc_insertion_point(field_get:serialized.Player.x)
  return _internal_x();
}
inline void Player::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Player::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialized.Player.x)
}

// required float y = 2;
inline bool Player::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Player::has_y() const {
  return _internal_has_y();
}
inline void Player::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Player::_internal_y() const {
  return y_;
}
inline float Player::y() const {
  // @@protoc_insertion_point(field_get:serialized.Player.y)
  return _internal_y();
}
inline void Player::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Player::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialized.Player.y)
}

// required int32 id = 3;
inline bool Player::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Player::has_id() const {
  return _internal_has_id();
}
inline void Player::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::id() const {
  // @@protoc_insertion_point(field_get:serialized.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serialized.Player.id)
}

// -------------------------------------------------------------------

// Bullet

// required float x = 1;
inline bool Bullet::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bullet::has_x() const {
  return _internal_has_x();
}
inline void Bullet::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Bullet::_internal_x() const {
  return x_;
}
inline float Bullet::x() const {
  // @@protoc_insertion_point(field_get:serialized.Bullet.x)
  return _internal_x();
}
inline void Bullet::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Bullet::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialized.Bullet.x)
}

// required float y = 2;
inline bool Bullet::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bullet::has_y() const {
  return _internal_has_y();
}
inline void Bullet::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Bullet::_internal_y() const {
  return y_;
}
inline float Bullet::y() const {
  // @@protoc_insertion_point(field_get:serialized.Bullet.y)
  return _internal_y();
}
inline void Bullet::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Bullet::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialized.Bullet.y)
}

// required int32 id = 3;
inline bool Bullet::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bullet::has_id() const {
  return _internal_has_id();
}
inline void Bullet::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::id() const {
  // @@protoc_insertion_point(field_get:serialized.Bullet.id)
  return _internal_id();
}
inline void Bullet::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Bullet::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serialized.Bullet.id)
}

// -------------------------------------------------------------------

// Map

// required int32 x = 1;
inline bool Map::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Map::has_x() const {
  return _internal_has_x();
}
inline void Map::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::x() const {
  // @@protoc_insertion_point(field_get:serialized.Map.x)
  return _internal_x();
}
inline void Map::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Map::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialized.Map.x)
}

// required int32 y = 2;
inline bool Map::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Map::has_y() const {
  return _internal_has_y();
}
inline void Map::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::y() const {
  // @@protoc_insertion_point(field_get:serialized.Map.y)
  return _internal_y();
}
inline void Map::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Map::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialized.Map.y)
}

// required int32 rowsNumber = 3;
inline bool Map::_internal_has_rowsnumber() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Map::has_rowsnumber() const {
  return _internal_has_rowsnumber();
}
inline void Map::clear_rowsnumber() {
  rowsnumber_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_rowsnumber() const {
  return rowsnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::rowsnumber() const {
  // @@protoc_insertion_point(field_get:serialized.Map.rowsNumber)
  return _internal_rowsnumber();
}
inline void Map::_internal_set_rowsnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  rowsnumber_ = value;
}
inline void Map::set_rowsnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rowsnumber(value);
  // @@protoc_insertion_point(field_set:serialized.Map.rowsNumber)
}

// required int32 columnsNumber = 4;
inline bool Map::_internal_has_columnsnumber() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Map::has_columnsnumber() const {
  return _internal_has_columnsnumber();
}
inline void Map::clear_columnsnumber() {
  columnsnumber_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_columnsnumber() const {
  return columnsnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::columnsnumber() const {
  // @@protoc_insertion_point(field_get:serialized.Map.columnsNumber)
  return _internal_columnsnumber();
}
inline void Map::_internal_set_columnsnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  columnsnumber_ = value;
}
inline void Map::set_columnsnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_columnsnumber(value);
  // @@protoc_insertion_point(field_set:serialized.Map.columnsNumber)
}

// repeated .serialized.MapBoxesRow rows = 5;
inline int Map::_internal_rows_size() const {
  return rows_.size();
}
inline int Map::rows_size() const {
  return _internal_rows_size();
}
inline void Map::clear_rows() {
  rows_.Clear();
}
inline ::serialized::MapBoxesRow* Map::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:serialized.Map.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBoxesRow >*
Map::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:serialized.Map.rows)
  return &rows_;
}
inline const ::serialized::MapBoxesRow& Map::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::serialized::MapBoxesRow& Map::rows(int index) const {
  // @@protoc_insertion_point(field_get:serialized.Map.rows)
  return _internal_rows(index);
}
inline ::serialized::MapBoxesRow* Map::_internal_add_rows() {
  return rows_.Add();
}
inline ::serialized::MapBoxesRow* Map::add_rows() {
  // @@protoc_insertion_point(field_add:serialized.Map.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBoxesRow >&
Map::rows() const {
  // @@protoc_insertion_point(field_list:serialized.Map.rows)
  return rows_;
}

// -------------------------------------------------------------------

// MapBoxesRow

// repeated .serialized.MapBox boxes = 1;
inline int MapBoxesRow::_internal_boxes_size() const {
  return boxes_.size();
}
inline int MapBoxesRow::boxes_size() const {
  return _internal_boxes_size();
}
inline void MapBoxesRow::clear_boxes() {
  boxes_.Clear();
}
inline ::serialized::MapBox* MapBoxesRow::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:serialized.MapBoxesRow.boxes)
  return boxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBox >*
MapBoxesRow::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:serialized.MapBoxesRow.boxes)
  return &boxes_;
}
inline const ::serialized::MapBox& MapBoxesRow::_internal_boxes(int index) const {
  return boxes_.Get(index);
}
inline const ::serialized::MapBox& MapBoxesRow::boxes(int index) const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxesRow.boxes)
  return _internal_boxes(index);
}
inline ::serialized::MapBox* MapBoxesRow::_internal_add_boxes() {
  return boxes_.Add();
}
inline ::serialized::MapBox* MapBoxesRow::add_boxes() {
  // @@protoc_insertion_point(field_add:serialized.MapBoxesRow.boxes)
  return _internal_add_boxes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialized::MapBox >&
MapBoxesRow::boxes() const {
  // @@protoc_insertion_point(field_list:serialized.MapBoxesRow.boxes)
  return boxes_;
}

// -------------------------------------------------------------------

// MapBox

// required float x = 1;
inline bool MapBox::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MapBox::has_x() const {
  return _internal_has_x();
}
inline void MapBox::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MapBox::_internal_x() const {
  return x_;
}
inline float MapBox::x() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.x)
  return _internal_x();
}
inline void MapBox::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000010u;
  x_ = value;
}
inline void MapBox::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialized.MapBox.x)
}

// required float y = 2;
inline bool MapBox::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MapBox::has_y() const {
  return _internal_has_y();
}
inline void MapBox::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float MapBox::_internal_y() const {
  return y_;
}
inline float MapBox::y() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.y)
  return _internal_y();
}
inline void MapBox::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  y_ = value;
}
inline void MapBox::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialized.MapBox.y)
}

// required .serialized.MapBoxWall leftWall = 3;
inline bool MapBox::_internal_has_leftwall() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || leftwall_ != nullptr);
  return value;
}
inline bool MapBox::has_leftwall() const {
  return _internal_has_leftwall();
}
inline void MapBox::clear_leftwall() {
  if (leftwall_ != nullptr) leftwall_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::serialized::MapBoxWall& MapBox::_internal_leftwall() const {
  const ::serialized::MapBoxWall* p = leftwall_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline const ::serialized::MapBoxWall& MapBox::leftwall() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.leftWall)
  return _internal_leftwall();
}
inline void MapBox::unsafe_arena_set_allocated_leftwall(
    ::serialized::MapBoxWall* leftwall) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftwall_);
  }
  leftwall_ = leftwall;
  if (leftwall) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialized.MapBox.leftWall)
}
inline ::serialized::MapBoxWall* MapBox::release_leftwall() {
  auto temp = unsafe_arena_release_leftwall();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::unsafe_arena_release_leftwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.leftWall)
  _has_bits_[0] &= ~0x00000001u;
  ::serialized::MapBoxWall* temp = leftwall_;
  leftwall_ = nullptr;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::_internal_mutable_leftwall() {
  _has_bits_[0] |= 0x00000001u;
  if (leftwall_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArena());
    leftwall_ = p;
  }
  return leftwall_;
}
inline ::serialized::MapBoxWall* MapBox::mutable_leftwall() {
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.leftWall)
  return _internal_mutable_leftwall();
}
inline void MapBox::set_allocated_leftwall(::serialized::MapBoxWall* leftwall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leftwall_;
  }
  if (leftwall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leftwall);
    if (message_arena != submessage_arena) {
      leftwall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftwall, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leftwall_ = leftwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.leftWall)
}

// required .serialized.MapBoxWall upperWall = 4;
inline bool MapBox::_internal_has_upperwall() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || upperwall_ != nullptr);
  return value;
}
inline bool MapBox::has_upperwall() const {
  return _internal_has_upperwall();
}
inline void MapBox::clear_upperwall() {
  if (upperwall_ != nullptr) upperwall_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::serialized::MapBoxWall& MapBox::_internal_upperwall() const {
  const ::serialized::MapBoxWall* p = upperwall_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline const ::serialized::MapBoxWall& MapBox::upperwall() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.upperWall)
  return _internal_upperwall();
}
inline void MapBox::unsafe_arena_set_allocated_upperwall(
    ::serialized::MapBoxWall* upperwall) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upperwall_);
  }
  upperwall_ = upperwall;
  if (upperwall) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialized.MapBox.upperWall)
}
inline ::serialized::MapBoxWall* MapBox::release_upperwall() {
  auto temp = unsafe_arena_release_upperwall();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::unsafe_arena_release_upperwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.upperWall)
  _has_bits_[0] &= ~0x00000002u;
  ::serialized::MapBoxWall* temp = upperwall_;
  upperwall_ = nullptr;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::_internal_mutable_upperwall() {
  _has_bits_[0] |= 0x00000002u;
  if (upperwall_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArena());
    upperwall_ = p;
  }
  return upperwall_;
}
inline ::serialized::MapBoxWall* MapBox::mutable_upperwall() {
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.upperWall)
  return _internal_mutable_upperwall();
}
inline void MapBox::set_allocated_upperwall(::serialized::MapBoxWall* upperwall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upperwall_;
  }
  if (upperwall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upperwall);
    if (message_arena != submessage_arena) {
      upperwall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upperwall, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  upperwall_ = upperwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.upperWall)
}

// required .serialized.MapBoxWall rightWall = 5;
inline bool MapBox::_internal_has_rightwall() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rightwall_ != nullptr);
  return value;
}
inline bool MapBox::has_rightwall() const {
  return _internal_has_rightwall();
}
inline void MapBox::clear_rightwall() {
  if (rightwall_ != nullptr) rightwall_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::serialized::MapBoxWall& MapBox::_internal_rightwall() const {
  const ::serialized::MapBoxWall* p = rightwall_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline const ::serialized::MapBoxWall& MapBox::rightwall() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.rightWall)
  return _internal_rightwall();
}
inline void MapBox::unsafe_arena_set_allocated_rightwall(
    ::serialized::MapBoxWall* rightwall) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightwall_);
  }
  rightwall_ = rightwall;
  if (rightwall) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialized.MapBox.rightWall)
}
inline ::serialized::MapBoxWall* MapBox::release_rightwall() {
  auto temp = unsafe_arena_release_rightwall();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::unsafe_arena_release_rightwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.rightWall)
  _has_bits_[0] &= ~0x00000004u;
  ::serialized::MapBoxWall* temp = rightwall_;
  rightwall_ = nullptr;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::_internal_mutable_rightwall() {
  _has_bits_[0] |= 0x00000004u;
  if (rightwall_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArena());
    rightwall_ = p;
  }
  return rightwall_;
}
inline ::serialized::MapBoxWall* MapBox::mutable_rightwall() {
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.rightWall)
  return _internal_mutable_rightwall();
}
inline void MapBox::set_allocated_rightwall(::serialized::MapBoxWall* rightwall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rightwall_;
  }
  if (rightwall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rightwall);
    if (message_arena != submessage_arena) {
      rightwall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightwall, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rightwall_ = rightwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.rightWall)
}

// required .serialized.MapBoxWall lowerWall = 6;
inline bool MapBox::_internal_has_lowerwall() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || lowerwall_ != nullptr);
  return value;
}
inline bool MapBox::has_lowerwall() const {
  return _internal_has_lowerwall();
}
inline void MapBox::clear_lowerwall() {
  if (lowerwall_ != nullptr) lowerwall_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::serialized::MapBoxWall& MapBox::_internal_lowerwall() const {
  const ::serialized::MapBoxWall* p = lowerwall_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialized::MapBoxWall*>(
      &::serialized::_MapBoxWall_default_instance_);
}
inline const ::serialized::MapBoxWall& MapBox::lowerwall() const {
  // @@protoc_insertion_point(field_get:serialized.MapBox.lowerWall)
  return _internal_lowerwall();
}
inline void MapBox::unsafe_arena_set_allocated_lowerwall(
    ::serialized::MapBoxWall* lowerwall) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowerwall_);
  }
  lowerwall_ = lowerwall;
  if (lowerwall) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialized.MapBox.lowerWall)
}
inline ::serialized::MapBoxWall* MapBox::release_lowerwall() {
  auto temp = unsafe_arena_release_lowerwall();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::unsafe_arena_release_lowerwall() {
  // @@protoc_insertion_point(field_release:serialized.MapBox.lowerWall)
  _has_bits_[0] &= ~0x00000008u;
  ::serialized::MapBoxWall* temp = lowerwall_;
  lowerwall_ = nullptr;
  return temp;
}
inline ::serialized::MapBoxWall* MapBox::_internal_mutable_lowerwall() {
  _has_bits_[0] |= 0x00000008u;
  if (lowerwall_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialized::MapBoxWall>(GetArena());
    lowerwall_ = p;
  }
  return lowerwall_;
}
inline ::serialized::MapBoxWall* MapBox::mutable_lowerwall() {
  // @@protoc_insertion_point(field_mutable:serialized.MapBox.lowerWall)
  return _internal_mutable_lowerwall();
}
inline void MapBox::set_allocated_lowerwall(::serialized::MapBoxWall* lowerwall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lowerwall_;
  }
  if (lowerwall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lowerwall);
    if (message_arena != submessage_arena) {
      lowerwall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowerwall, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lowerwall_ = lowerwall;
  // @@protoc_insertion_point(field_set_allocated:serialized.MapBox.lowerWall)
}

// -------------------------------------------------------------------

// MapBoxWall

// required float x = 1;
inline bool MapBoxWall::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MapBoxWall::has_x() const {
  return _internal_has_x();
}
inline void MapBoxWall::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MapBoxWall::_internal_x() const {
  return x_;
}
inline float MapBoxWall::x() const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxWall.x)
  return _internal_x();
}
inline void MapBoxWall::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void MapBoxWall::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialized.MapBoxWall.x)
}

// required float y = 2;
inline bool MapBoxWall::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MapBoxWall::has_y() const {
  return _internal_has_y();
}
inline void MapBoxWall::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MapBoxWall::_internal_y() const {
  return y_;
}
inline float MapBoxWall::y() const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxWall.y)
  return _internal_y();
}
inline void MapBoxWall::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void MapBoxWall::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialized.MapBoxWall.y)
}

// required bool isHidden = 3;
inline bool MapBoxWall::_internal_has_ishidden() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MapBoxWall::has_ishidden() const {
  return _internal_has_ishidden();
}
inline void MapBoxWall::clear_ishidden() {
  ishidden_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MapBoxWall::_internal_ishidden() const {
  return ishidden_;
}
inline bool MapBoxWall::ishidden() const {
  // @@protoc_insertion_point(field_get:serialized.MapBoxWall.isHidden)
  return _internal_ishidden();
}
inline void MapBoxWall::_internal_set_ishidden(bool value) {
  _has_bits_[0] |= 0x00000004u;
  ishidden_ = value;
}
inline void MapBoxWall::set_ishidden(bool value) {
  _internal_set_ishidden(value);
  // @@protoc_insertion_point(field_set:serialized.MapBoxWall.isHidden)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialized

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameState_2eproto
