// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#include "GameState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_GameState_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Bullet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapBoxWall;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Map;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapBox;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapBoxesRow;
}  // namespace protobuf_GameState_2eproto
namespace serialized {
class GameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState>
      _instance;
} _GameState_default_instance_;
class PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Player>
      _instance;
} _Player_default_instance_;
class BulletDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bullet>
      _instance;
} _Bullet_default_instance_;
class MapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Map>
      _instance;
} _Map_default_instance_;
class MapBoxesRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapBoxesRow>
      _instance;
} _MapBoxesRow_default_instance_;
class MapBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapBox>
      _instance;
} _MapBox_default_instance_;
class MapBoxWallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapBoxWall>
      _instance;
} _MapBoxWall_default_instance_;
}  // namespace serialized
namespace protobuf_GameState_2eproto {
static void InitDefaultsGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialized::_GameState_default_instance_;
    new (ptr) ::serialized::GameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialized::GameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGameState}, {
      &protobuf_GameState_2eproto::scc_info_Player.base,
      &protobuf_GameState_2eproto::scc_info_Map.base,
      &protobuf_GameState_2eproto::scc_info_Bullet.base,}};

static void InitDefaultsPlayer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialized::_Player_default_instance_;
    new (ptr) ::serialized::Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialized::Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayer}, {}};

static void InitDefaultsBullet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialized::_Bullet_default_instance_;
    new (ptr) ::serialized::Bullet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialized::Bullet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Bullet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBullet}, {}};

static void InitDefaultsMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialized::_Map_default_instance_;
    new (ptr) ::serialized::Map();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialized::Map::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Map =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMap}, {
      &protobuf_GameState_2eproto::scc_info_MapBoxesRow.base,}};

static void InitDefaultsMapBoxesRow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialized::_MapBoxesRow_default_instance_;
    new (ptr) ::serialized::MapBoxesRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialized::MapBoxesRow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapBoxesRow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapBoxesRow}, {
      &protobuf_GameState_2eproto::scc_info_MapBox.base,}};

static void InitDefaultsMapBox() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialized::_MapBox_default_instance_;
    new (ptr) ::serialized::MapBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialized::MapBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapBox =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapBox}, {
      &protobuf_GameState_2eproto::scc_info_MapBoxWall.base,}};

static void InitDefaultsMapBoxWall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialized::_MapBoxWall_default_instance_;
    new (ptr) ::serialized::MapBoxWall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialized::MapBoxWall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapBoxWall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapBoxWall}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bullet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Map.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapBoxesRow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapBox.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapBoxWall.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::GameState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::GameState, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::GameState, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::GameState, bullets_),
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Player, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Player, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Player, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Player, rotationangle_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Bullet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Bullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Bullet, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Bullet, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Bullet, rotationangle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Map, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Map, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Map, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Map, rowsnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Map, columnsnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::Map, rows_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxesRow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxesRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxesRow, boxes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, leftwall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, upperwall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, rightwall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBox, lowerwall_),
  4,
  5,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxWall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxWall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxWall, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxWall, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serialized::MapBoxWall, ishidden_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::serialized::GameState)},
  { 11, 20, sizeof(::serialized::Player)},
  { 24, 32, sizeof(::serialized::Bullet)},
  { 35, 45, sizeof(::serialized::Map)},
  { 50, 56, sizeof(::serialized::MapBoxesRow)},
  { 57, 68, sizeof(::serialized::MapBox)},
  { 74, 82, sizeof(::serialized::MapBoxWall)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::serialized::_GameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serialized::_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serialized::_Bullet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serialized::_Map_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serialized::_MapBoxesRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serialized::_MapBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serialized::_MapBoxWall_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "GameState.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017GameState.proto\022\nserialized\"s\n\tGameSta"
      "te\022#\n\007players\030\001 \003(\0132\022.serialized.Player\022"
      "\034\n\003map\030\002 \001(\0132\017.serialized.Map\022#\n\007bullets"
      "\030\003 \003(\0132\022.serialized.Bullet\"A\n\006Player\022\t\n\001"
      "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\n\n\002id\030\003 \002(\005\022\025\n\rrotati"
      "onAngle\030\004 \002(\002\"5\n\006Bullet\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030"
      "\002 \002(\002\022\025\n\rrotationAngle\030\003 \002(\002\"m\n\003Map\022\t\n\001x"
      "\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\022\n\nrowsNumber\030\003 \002(\005\022\025\n"
      "\rcolumnsNumber\030\004 \002(\005\022%\n\004rows\030\005 \003(\0132\027.ser"
      "ialized.MapBoxesRow\"0\n\013MapBoxesRow\022!\n\005bo"
      "xes\030\001 \003(\0132\022.serialized.MapBox\"\311\001\n\006MapBox"
      "\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022(\n\010leftWall\030\003 \002(\013"
      "2\026.serialized.MapBoxWall\022)\n\tupperWall\030\004 "
      "\002(\0132\026.serialized.MapBoxWall\022)\n\trightWall"
      "\030\005 \002(\0132\026.serialized.MapBoxWall\022)\n\tlowerW"
      "all\030\006 \002(\0132\026.serialized.MapBoxWall\"4\n\nMap"
      "BoxWall\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\020\n\010isHidde"
      "n\030\003 \002(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameState.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_GameState_2eproto
namespace serialized {

// ===================================================================

void GameState::InitAsDefaultInstance() {
  ::serialized::_GameState_default_instance_._instance.get_mutable()->map_ = const_cast< ::serialized::Map*>(
      ::serialized::Map::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kPlayersFieldNumber;
const int GameState::kMapFieldNumber;
const int GameState::kBulletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameState_2eproto::scc_info_GameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialized.GameState)
}
GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      bullets_(from.bullets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map()) {
    map_ = new ::serialized::Map(*from.map_);
  } else {
    map_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:serialized.GameState)
}

void GameState::SharedCtor() {
  map_ = NULL;
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:serialized.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  if (this != internal_default_instance()) delete map_;
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  ::protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameState& GameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameState_2eproto::scc_info_GameState.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:serialized.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  bullets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(map_ != NULL);
    map_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serialized.GameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .serialized.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .serialized.Map map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .serialized.Bullet bullets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bullets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serialized.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serialized.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serialized.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialized.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .serialized.Map map = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_map(), output);
  }

  // repeated .serialized.Bullet bullets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bullets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->bullets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serialized.GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serialized.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialized.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .serialized.Map map = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_map(), deterministic, target);
  }

  // repeated .serialized.Bullet bullets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bullets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->bullets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialized.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialized.GameState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .serialized.Player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated .serialized.Bullet bullets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->bullets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bullets(static_cast<int>(i)));
    }
  }

  // optional .serialized.Map map = 2;
  if (has_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialized.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialized.GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialized.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialized.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  bullets_.MergeFrom(from.bullets_);
  if (from.has_map()) {
    mutable_map()->::serialized::Map::MergeFrom(from.map());
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialized.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialized.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bullets())) return false;
  if (has_map()) {
    if (!this->map_->IsInitialized()) return false;
  }
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  CastToBase(&bullets_)->InternalSwap(CastToBase(&other->bullets_));
  swap(map_, other->map_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kXFieldNumber;
const int Player::kYFieldNumber;
const int Player::kIdFieldNumber;
const int Player::kRotationAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameState_2eproto::scc_info_Player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialized.Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationangle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
  // @@protoc_insertion_point(copy_constructor:serialized.Player)
}

void Player::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationangle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:serialized.Player)
  SharedDtor();
}

void Player::SharedDtor() {
}

void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  ::protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Player& Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameState_2eproto::scc_info_Player.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:serialized.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotationangle_) -
        reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serialized.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rotationAngle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_rotationangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serialized.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serialized.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serialized.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required float rotationAngle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rotationangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serialized.Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serialized.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // required float rotationAngle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rotationangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialized.Player)
  return target;
}

size_t Player::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:serialized.Player)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_id()) {
    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_rotationangle()) {
    // required float rotationAngle = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialized.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float rotationAngle = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialized.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialized.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialized.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialized.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      rotationangle_ = from.rotationangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialized.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialized.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(id_, other->id_);
  swap(rotationangle_, other->rotationangle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bullet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bullet::kXFieldNumber;
const int Bullet::kYFieldNumber;
const int Bullet::kRotationAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bullet::Bullet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameState_2eproto::scc_info_Bullet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialized.Bullet)
}
Bullet::Bullet(const Bullet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationangle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
  // @@protoc_insertion_point(copy_constructor:serialized.Bullet)
}

void Bullet::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationangle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
}

Bullet::~Bullet() {
  // @@protoc_insertion_point(destructor:serialized.Bullet)
  SharedDtor();
}

void Bullet::SharedDtor() {
}

void Bullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Bullet::descriptor() {
  ::protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bullet& Bullet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameState_2eproto::scc_info_Bullet.base);
  return *internal_default_instance();
}


void Bullet::Clear() {
// @@protoc_insertion_point(message_clear_start:serialized.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotationangle_) -
        reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serialized.Bullet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rotationAngle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_rotationangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serialized.Bullet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serialized.Bullet)
  return false;
#undef DO_
}

void Bullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serialized.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float rotationAngle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rotationangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serialized.Bullet)
}

::google::protobuf::uint8* Bullet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serialized.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float rotationAngle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rotationangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialized.Bullet)
  return target;
}

size_t Bullet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:serialized.Bullet)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_rotationangle()) {
    // required float rotationAngle = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Bullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialized.Bullet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float rotationAngle = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bullet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialized.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  const Bullet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bullet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialized.Bullet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialized.Bullet)
    MergeFrom(*source);
  }
}

void Bullet::MergeFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialized.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      rotationangle_ = from.rotationangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bullet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialized.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bullet::CopyFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialized.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Bullet::Swap(Bullet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bullet::InternalSwap(Bullet* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(rotationangle_, other->rotationangle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Bullet::GetMetadata() const {
  protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Map::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map::kXFieldNumber;
const int Map::kYFieldNumber;
const int Map::kRowsNumberFieldNumber;
const int Map::kColumnsNumberFieldNumber;
const int Map::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map::Map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameState_2eproto::scc_info_Map.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialized.Map)
}
Map::Map(const Map& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&columnsnumber_) -
    reinterpret_cast<char*>(&x_)) + sizeof(columnsnumber_));
  // @@protoc_insertion_point(copy_constructor:serialized.Map)
}

void Map::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columnsnumber_) -
      reinterpret_cast<char*>(&x_)) + sizeof(columnsnumber_));
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:serialized.Map)
  SharedDtor();
}

void Map::SharedDtor() {
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  ::protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Map& Map::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameState_2eproto::scc_info_Map.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:serialized.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&columnsnumber_) -
        reinterpret_cast<char*>(&x_)) + sizeof(columnsnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serialized.Map)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rowsNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rowsnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rowsnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 columnsNumber = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_columnsnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columnsnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .serialized.MapBoxesRow rows = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serialized.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serialized.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serialized.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 rowsNumber = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rowsnumber(), output);
  }

  // required int32 columnsNumber = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->columnsnumber(), output);
  }

  // repeated .serialized.MapBoxesRow rows = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->rows(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serialized.Map)
}

::google::protobuf::uint8* Map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serialized.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 rowsNumber = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rowsnumber(), target);
  }

  // required int32 columnsNumber = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->columnsnumber(), target);
  }

  // repeated .serialized.MapBoxesRow rows = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->rows(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialized.Map)
  return target;
}

size_t Map::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:serialized.Map)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_rowsnumber()) {
    // required int32 rowsNumber = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rowsnumber());
  }

  if (has_columnsnumber()) {
    // required int32 columnsNumber = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columnsnumber());
  }

  return total_size;
}
size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialized.Map)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 rowsNumber = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rowsnumber());

    // required int32 columnsNumber = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columnsnumber());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .serialized.MapBoxesRow rows = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialized.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialized.Map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialized.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialized.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      rowsnumber_ = from.rowsnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      columnsnumber_ = from.columnsnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialized.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialized.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rows())) return false;
  return true;
}

void Map::Swap(Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map::InternalSwap(Map* other) {
  using std::swap;
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(rowsnumber_, other->rowsnumber_);
  swap(columnsnumber_, other->columnsnumber_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapBoxesRow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBoxesRow::kBoxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBoxesRow::MapBoxesRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameState_2eproto::scc_info_MapBoxesRow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialized.MapBoxesRow)
}
MapBoxesRow::MapBoxesRow(const MapBoxesRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      boxes_(from.boxes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serialized.MapBoxesRow)
}

void MapBoxesRow::SharedCtor() {
}

MapBoxesRow::~MapBoxesRow() {
  // @@protoc_insertion_point(destructor:serialized.MapBoxesRow)
  SharedDtor();
}

void MapBoxesRow::SharedDtor() {
}

void MapBoxesRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapBoxesRow::descriptor() {
  ::protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapBoxesRow& MapBoxesRow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameState_2eproto::scc_info_MapBoxesRow.base);
  return *internal_default_instance();
}


void MapBoxesRow::Clear() {
// @@protoc_insertion_point(message_clear_start:serialized.MapBoxesRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapBoxesRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serialized.MapBoxesRow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .serialized.MapBox boxes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_boxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serialized.MapBoxesRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serialized.MapBoxesRow)
  return false;
#undef DO_
}

void MapBoxesRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serialized.MapBoxesRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialized.MapBox boxes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boxes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->boxes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serialized.MapBoxesRow)
}

::google::protobuf::uint8* MapBoxesRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serialized.MapBoxesRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialized.MapBox boxes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boxes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->boxes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialized.MapBoxesRow)
  return target;
}

size_t MapBoxesRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialized.MapBoxesRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .serialized.MapBox boxes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->boxes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boxes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBoxesRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialized.MapBoxesRow)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBoxesRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapBoxesRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialized.MapBoxesRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialized.MapBoxesRow)
    MergeFrom(*source);
  }
}

void MapBoxesRow::MergeFrom(const MapBoxesRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialized.MapBoxesRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boxes_.MergeFrom(from.boxes_);
}

void MapBoxesRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialized.MapBoxesRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBoxesRow::CopyFrom(const MapBoxesRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialized.MapBoxesRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBoxesRow::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->boxes())) return false;
  return true;
}

void MapBoxesRow::Swap(MapBoxesRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBoxesRow::InternalSwap(MapBoxesRow* other) {
  using std::swap;
  CastToBase(&boxes_)->InternalSwap(CastToBase(&other->boxes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapBoxesRow::GetMetadata() const {
  protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapBox::InitAsDefaultInstance() {
  ::serialized::_MapBox_default_instance_._instance.get_mutable()->leftwall_ = const_cast< ::serialized::MapBoxWall*>(
      ::serialized::MapBoxWall::internal_default_instance());
  ::serialized::_MapBox_default_instance_._instance.get_mutable()->upperwall_ = const_cast< ::serialized::MapBoxWall*>(
      ::serialized::MapBoxWall::internal_default_instance());
  ::serialized::_MapBox_default_instance_._instance.get_mutable()->rightwall_ = const_cast< ::serialized::MapBoxWall*>(
      ::serialized::MapBoxWall::internal_default_instance());
  ::serialized::_MapBox_default_instance_._instance.get_mutable()->lowerwall_ = const_cast< ::serialized::MapBoxWall*>(
      ::serialized::MapBoxWall::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBox::kXFieldNumber;
const int MapBox::kYFieldNumber;
const int MapBox::kLeftWallFieldNumber;
const int MapBox::kUpperWallFieldNumber;
const int MapBox::kRightWallFieldNumber;
const int MapBox::kLowerWallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBox::MapBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameState_2eproto::scc_info_MapBox.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialized.MapBox)
}
MapBox::MapBox(const MapBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leftwall()) {
    leftwall_ = new ::serialized::MapBoxWall(*from.leftwall_);
  } else {
    leftwall_ = NULL;
  }
  if (from.has_upperwall()) {
    upperwall_ = new ::serialized::MapBoxWall(*from.upperwall_);
  } else {
    upperwall_ = NULL;
  }
  if (from.has_rightwall()) {
    rightwall_ = new ::serialized::MapBoxWall(*from.rightwall_);
  } else {
    rightwall_ = NULL;
  }
  if (from.has_lowerwall()) {
    lowerwall_ = new ::serialized::MapBoxWall(*from.lowerwall_);
  } else {
    lowerwall_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:serialized.MapBox)
}

void MapBox::SharedCtor() {
  ::memset(&leftwall_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&leftwall_)) + sizeof(y_));
}

MapBox::~MapBox() {
  // @@protoc_insertion_point(destructor:serialized.MapBox)
  SharedDtor();
}

void MapBox::SharedDtor() {
  if (this != internal_default_instance()) delete leftwall_;
  if (this != internal_default_instance()) delete upperwall_;
  if (this != internal_default_instance()) delete rightwall_;
  if (this != internal_default_instance()) delete lowerwall_;
}

void MapBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapBox::descriptor() {
  ::protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapBox& MapBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameState_2eproto::scc_info_MapBox.base);
  return *internal_default_instance();
}


void MapBox::Clear() {
// @@protoc_insertion_point(message_clear_start:serialized.MapBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(leftwall_ != NULL);
      leftwall_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(upperwall_ != NULL);
      upperwall_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rightwall_ != NULL);
      rightwall_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lowerwall_ != NULL);
      lowerwall_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serialized.MapBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .serialized.MapBoxWall leftWall = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leftwall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .serialized.MapBoxWall upperWall = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upperwall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .serialized.MapBoxWall rightWall = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rightwall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .serialized.MapBoxWall lowerWall = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lowerwall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serialized.MapBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serialized.MapBox)
  return false;
#undef DO_
}

void MapBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serialized.MapBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required .serialized.MapBoxWall leftWall = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_leftwall(), output);
  }

  // required .serialized.MapBoxWall upperWall = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_upperwall(), output);
  }

  // required .serialized.MapBoxWall rightWall = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_rightwall(), output);
  }

  // required .serialized.MapBoxWall lowerWall = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_lowerwall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serialized.MapBox)
}

::google::protobuf::uint8* MapBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serialized.MapBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required .serialized.MapBoxWall leftWall = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_leftwall(), deterministic, target);
  }

  // required .serialized.MapBoxWall upperWall = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_upperwall(), deterministic, target);
  }

  // required .serialized.MapBoxWall rightWall = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_rightwall(), deterministic, target);
  }

  // required .serialized.MapBoxWall lowerWall = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_lowerwall(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialized.MapBox)
  return target;
}

size_t MapBox::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:serialized.MapBox)
  size_t total_size = 0;

  if (has_leftwall()) {
    // required .serialized.MapBoxWall leftWall = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leftwall_);
  }

  if (has_upperwall()) {
    // required .serialized.MapBoxWall upperWall = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upperwall_);
  }

  if (has_rightwall()) {
    // required .serialized.MapBoxWall rightWall = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rightwall_);
  }

  if (has_lowerwall()) {
    // required .serialized.MapBoxWall lowerWall = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lowerwall_);
  }

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MapBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialized.MapBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .serialized.MapBoxWall leftWall = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leftwall_);

    // required .serialized.MapBoxWall upperWall = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upperwall_);

    // required .serialized.MapBoxWall rightWall = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rightwall_);

    // required .serialized.MapBoxWall lowerWall = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lowerwall_);

    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialized.MapBox)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialized.MapBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialized.MapBox)
    MergeFrom(*source);
  }
}

void MapBox::MergeFrom(const MapBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialized.MapBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_leftwall()->::serialized::MapBoxWall::MergeFrom(from.leftwall());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_upperwall()->::serialized::MapBoxWall::MergeFrom(from.upperwall());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rightwall()->::serialized::MapBoxWall::MergeFrom(from.rightwall());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_lowerwall()->::serialized::MapBoxWall::MergeFrom(from.lowerwall());
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialized.MapBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBox::CopyFrom(const MapBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialized.MapBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_leftwall()) {
    if (!this->leftwall_->IsInitialized()) return false;
  }
  if (has_upperwall()) {
    if (!this->upperwall_->IsInitialized()) return false;
  }
  if (has_rightwall()) {
    if (!this->rightwall_->IsInitialized()) return false;
  }
  if (has_lowerwall()) {
    if (!this->lowerwall_->IsInitialized()) return false;
  }
  return true;
}

void MapBox::Swap(MapBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBox::InternalSwap(MapBox* other) {
  using std::swap;
  swap(leftwall_, other->leftwall_);
  swap(upperwall_, other->upperwall_);
  swap(rightwall_, other->rightwall_);
  swap(lowerwall_, other->lowerwall_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapBox::GetMetadata() const {
  protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapBoxWall::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBoxWall::kXFieldNumber;
const int MapBoxWall::kYFieldNumber;
const int MapBoxWall::kIsHiddenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBoxWall::MapBoxWall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameState_2eproto::scc_info_MapBoxWall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialized.MapBoxWall)
}
MapBoxWall::MapBoxWall(const MapBoxWall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ishidden_) -
    reinterpret_cast<char*>(&x_)) + sizeof(ishidden_));
  // @@protoc_insertion_point(copy_constructor:serialized.MapBoxWall)
}

void MapBoxWall::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishidden_) -
      reinterpret_cast<char*>(&x_)) + sizeof(ishidden_));
}

MapBoxWall::~MapBoxWall() {
  // @@protoc_insertion_point(destructor:serialized.MapBoxWall)
  SharedDtor();
}

void MapBoxWall::SharedDtor() {
}

void MapBoxWall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapBoxWall::descriptor() {
  ::protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapBoxWall& MapBoxWall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameState_2eproto::scc_info_MapBoxWall.base);
  return *internal_default_instance();
}


void MapBoxWall::Clear() {
// @@protoc_insertion_point(message_clear_start:serialized.MapBoxWall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ishidden_) -
        reinterpret_cast<char*>(&x_)) + sizeof(ishidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapBoxWall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serialized.MapBoxWall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isHidden = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ishidden();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serialized.MapBoxWall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serialized.MapBoxWall)
  return false;
#undef DO_
}

void MapBoxWall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serialized.MapBoxWall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required bool isHidden = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ishidden(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serialized.MapBoxWall)
}

::google::protobuf::uint8* MapBoxWall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serialized.MapBoxWall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required bool isHidden = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ishidden(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialized.MapBoxWall)
  return target;
}

size_t MapBoxWall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:serialized.MapBoxWall)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_ishidden()) {
    // required bool isHidden = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MapBoxWall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialized.MapBoxWall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required bool isHidden = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBoxWall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialized.MapBoxWall)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBoxWall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapBoxWall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialized.MapBoxWall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialized.MapBoxWall)
    MergeFrom(*source);
  }
}

void MapBoxWall::MergeFrom(const MapBoxWall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialized.MapBoxWall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      ishidden_ = from.ishidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapBoxWall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialized.MapBoxWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBoxWall::CopyFrom(const MapBoxWall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialized.MapBoxWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBoxWall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MapBoxWall::Swap(MapBoxWall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBoxWall::InternalSwap(MapBoxWall* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(ishidden_, other->ishidden_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapBoxWall::GetMetadata() const {
  protobuf_GameState_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameState_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serialized
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serialized::GameState* Arena::CreateMaybeMessage< ::serialized::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::serialized::GameState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serialized::Player* Arena::CreateMaybeMessage< ::serialized::Player >(Arena* arena) {
  return Arena::CreateInternal< ::serialized::Player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serialized::Bullet* Arena::CreateMaybeMessage< ::serialized::Bullet >(Arena* arena) {
  return Arena::CreateInternal< ::serialized::Bullet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serialized::Map* Arena::CreateMaybeMessage< ::serialized::Map >(Arena* arena) {
  return Arena::CreateInternal< ::serialized::Map >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serialized::MapBoxesRow* Arena::CreateMaybeMessage< ::serialized::MapBoxesRow >(Arena* arena) {
  return Arena::CreateInternal< ::serialized::MapBoxesRow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serialized::MapBox* Arena::CreateMaybeMessage< ::serialized::MapBox >(Arena* arena) {
  return Arena::CreateInternal< ::serialized::MapBox >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serialized::MapBoxWall* Arena::CreateMaybeMessage< ::serialized::MapBoxWall >(Arena* arena) {
  return Arena::CreateInternal< ::serialized::MapBoxWall >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
